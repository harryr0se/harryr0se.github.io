<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harry Rose</title>
    <link>https://harryrose.dev/</link>
    <description>Recent content on Harry Rose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 May 2020 02:49:38 +0100</lastBuildDate>
    
	<atom:link href="https://harryrose.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thoughts on C# 8 nullable references</title>
      <link>https://harryrose.dev/posts/csharp-nullables/</link>
      <pubDate>Sat, 09 May 2020 04:03:43 +0100</pubDate>
      
      <guid>https://harryrose.dev/posts/csharp-nullables/</guid>
      <description>&lt;p&gt;Recently I started working on a new C# project and was introduced by a colleague to C# 8&amp;rsquo;s new &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references&#34;&gt;nullable references&lt;/a&gt; feature.&lt;/p&gt;
&lt;p&gt;At first this statement might sound odd (it did to me), reference types within C# have always been nullable, right?
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Tada, a null string!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; myNullString = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;However, the key behind the new feature is &lt;em&gt;not&lt;/em&gt; to enable reference types to &lt;em&gt;be&lt;/em&gt; nullable, but to make your code more explicit about &lt;em&gt;which&lt;/em&gt; reference type variables can be null.&lt;/p&gt;
&lt;p&gt;In fact, that little snippet above actually provides the following compiler warning when enabled using the new feature:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Converting null literal or possible null value to non-nullable type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;so-what-do-i-do&#34;&gt;So what do I do?&lt;/h2&gt;
&lt;p&gt;In order to get rid of the new compiler warning we now have to use the &lt;code&gt;?&lt;/code&gt; operator after the type name, this marks the variable as being nullable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Tada, an explicitly nullable string!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string?&lt;/span&gt; myNullString = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it does a lot more than that!&lt;/p&gt;
&lt;p&gt;Now code that makes use of that variable will have new warnings if they don&amp;rsquo;t check the variable for null, or try to pass it to use that states it wants a non nullable &lt;code&gt;string&lt;/code&gt; type&lt;/p&gt;
&lt;p&gt;For example lets look at this fascinating function:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] SplitString(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str.Split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;In normal C# the following function can be called with either a valid or null string, it&amp;rsquo;s up to the implementation to decide how it handles null input and it&amp;rsquo;s up to the user to decide if they&amp;rsquo;re going to make sure they pass a valid string.&lt;/p&gt;
&lt;p&gt;If we now head back to the world of nullable references with this code:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; myNullString = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
SplitString(myNullString);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
We get the following compiler warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Possible null reference argument for parameter &amp;lsquo;str&amp;rsquo; in &amp;lsquo;project.SplitString&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A nice, clear warning that &lt;code&gt;SplitString&lt;/code&gt; has explicitly indicated that it wants a valid string,
If we want to update &lt;code&gt;SplitString&lt;/code&gt; to state that it&amp;rsquo;s happy to deal with null strings to, then we simply change  parameter &lt;code&gt;str&lt;/code&gt; type to &lt;code&gt;string?&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve personally seen the following benefits of the new feature in my new project:&lt;/p&gt;
&lt;h3 id=&#34;more-explicit-intent&#34;&gt;More explicit intent&lt;/h3&gt;
&lt;p&gt;It allows you to be clear about the expectations of your code, you either expect input of a nullable type or you don&amp;rsquo;t.
Same goes for return types, you can now be much clearer that a function may return null in certain circumstances.&lt;/p&gt;
&lt;p&gt;The expectations are baked into the types of our interface/api rather than in the documentation.&lt;/p&gt;
&lt;p&gt;For example:
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Database&lt;/span&gt;
{
    Item? GetItemById(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
The fact that &lt;code&gt;GetItemById&lt;/code&gt; can return null is clear, if we weren&amp;rsquo;t using nullables, users would have to look at the documentation for the function to work out if they needed to handle null results and the compiler wouldn&amp;rsquo;t be able to provide them with warnings.&lt;/p&gt;
&lt;h3 id=&#34;it-forces-you-to-handle-nullable-paths&#34;&gt;It forces you to handle nullable paths&lt;/h3&gt;
&lt;p&gt;Due to the compilers code analysis, if you have warnings as errors (like we do); the new feature forces you to consider your dataflow better.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; item = Database.GetItemById(&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;);
SplitString(item.Name);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we&amp;rsquo;re warned about our usage we must decide howe we want to deal with conditions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dereference of a possibly null reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;enforces-types-to-be-valid-upon-construction&#34;&gt;Enforces types to be valid upon construction&lt;/h3&gt;
&lt;p&gt;Due to the fact that all non nullable reference types must be initialized, otherwise they&amp;rsquo;ll default to null.
Classes must provide non null default values for their members, either via constructors (my preferred method) or by default values at the member level&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Item&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we don&amp;rsquo;t, the compiler produces the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Non-nullable property &amp;lsquo;Name&amp;rsquo; is uninitialized. Consider declaring the property as nullable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we&amp;rsquo;re really happy with an item optionally having a name then we can change it to &lt;code&gt;string?&lt;/code&gt; otherwise, we must make sure that an Item has a defined non null &lt;code&gt;Name&lt;/code&gt; upon construction&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Item&lt;/span&gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Item(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
    {
        Name = name;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve found that using the constructor to fix this warning has created (in my project) a move closer towards types being immutable after creation and made it clearer where a types properties and fields are mutated.&lt;/p&gt;
&lt;h2 id=&#34;gotchas&#34;&gt;Gotchas&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m a pretty big fan of the new feature, I can&amp;rsquo;t imagine I&amp;rsquo;ll start a new C# project without it from now on. But it did have a few points that confused me at the start.&lt;/p&gt;
&lt;p&gt;Hopefully they&amp;rsquo;ll help clear things up for you too 😊&lt;/p&gt;
&lt;h3 id=&#34;its-entirely-syntactic-sugar&#34;&gt;It&amp;rsquo;s entirely syntactic sugar&lt;/h3&gt;
&lt;p&gt;None of the above examples will stop a non nullable type from being null, this is a feature that enables better warnings at compilation time.&lt;/p&gt;
&lt;p&gt;From the Microsoft &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s no runtime difference between a non-nullable reference type and a nullable reference type. The compiler doesn&amp;rsquo;t add any runtime checking for non-nullable reference types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;its-not-about-removing-nulls-its-about-declaring-intent&#34;&gt;It&amp;rsquo;s not about removing nulls, it&amp;rsquo;s about declaring intent&lt;/h3&gt;
&lt;p&gt;As mentioned in this Microsoft &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references&#34;&gt;documentation&lt;/a&gt;, it&amp;rsquo;s best not to think of this feature as a means of removing null from your code. It&amp;rsquo;s better to think of it as an addition to your toolbox for creating high quality code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t use this feature to remove all null values from your code. Rather, you should declare your intent to the compiler and other developers that read your code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;warningsaserrors-project-setting-doesnt-work&#34;&gt;WarningsAsErrors project setting doesn&amp;rsquo;t work&lt;/h3&gt;
&lt;p&gt;We found that enabling the &lt;code&gt;&amp;lt;WarningsAsErrors&amp;gt;true&amp;lt;/WarningsAsErrors&amp;gt;&lt;/code&gt; setting in our C# project file still didn&amp;rsquo;t flag the nullable warnings as error and had to add them manually, here&amp;rsquo;s what we have in our projects.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;WarningsAsErrors&amp;gt;&lt;/span&gt;true&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/WarningsAsErrors&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;WarningsAsErrors&amp;gt;&lt;/span&gt;CS8600;CS8602;CS8603;CS8601;CS8618;CS8604&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/WarningsAsErrors&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Modern applications rely on so much state and data flow between systems and external libraries that any additional intent that we can bake into our code is in my mind a solid move forward towards improving code quality. Especially when it&amp;rsquo;s combined with first class analysis built into the complier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://harryrose.dev/about/</link>
      <pubDate>Sat, 09 May 2020 02:49:38 +0100</pubDate>
      
      <guid>https://harryrose.dev/about/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m a programmer currently living in Brighton, England.
I&amp;rsquo;ve been working professionally in the games industry since 2014.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;unity&#34;&gt;Unity&lt;/h1&gt;
&lt;p&gt;Currently I&amp;rsquo;m working as a Senior Software Developer at &lt;a href=&#34;https://unity.com/&#34;&gt;Unity Technologies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my roles within Unity I&amp;rsquo;ve worked in many different areas, mainly focusing on performance, optimisation and serialization.
I&amp;rsquo;m now focusing my attention on building the best possible internal tools and services for our developers&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/1Gj9X9EQrBQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;off-grid&#34;&gt;Off Grid&lt;/h1&gt;
&lt;p&gt;2016 - 2017&lt;/p&gt;
&lt;p&gt;As a programmer on the upcoming game Off Grid I oversaw the transition of the codebase from a prototype to a more robust and scalable framework and lead the creation of the games extensive modding tools, which I delivered a technical talk on at Develop: Brighton in 2017&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/VEQFje7WAU4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;feral-interactive&#34;&gt;Feral interactive&lt;/h1&gt;
&lt;h2 id=&#34;grid-autosport&#34;&gt;Grid Autosport&lt;/h2&gt;
&lt;p&gt;Lead the addition of the Android platform to Feral&amp;rsquo;s internal libraries to support the port of Grid Autosport to the Android ecosystem

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KkoF95CVZIw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;h2 id=&#34;alien-isolation---the-collection&#34;&gt;Alien: Isolation™ - The Collection&lt;/h2&gt;
&lt;p&gt;I was the Lead Developer on the macOS and Linux port of Alien Isolation.
Currently available on &lt;a href=&#34;http://store.steampowered.com/app/214490/&#34;&gt;Steam&lt;/a&gt; and the &lt;a href=&#34;https://apps.apple.com/us/app/alien-isolation-collection/id973568088&#34;&gt;Mac App Store&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/SUX25d0pZy8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;dirt-3-complete-edition&#34;&gt;DiRT 3 Complete Edition&lt;/h2&gt;
&lt;p&gt;I was a Developer on the macOS port of DiRT 3 and had a part in transitioning the game from Games For Windows Live to Steam&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ugnzfvJ_bAo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;black--white-2&#34;&gt;Black &amp;amp; White 2&lt;/h2&gt;
&lt;p&gt;I was a Developer on the 2014 macOS port of Black &amp;amp; White 2

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/pY846hYE4Xs&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
